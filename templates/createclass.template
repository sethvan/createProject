#!/bin/sh                                                                                                                            
# SPDX-License-Identifier: GPL-3.0-only or GPL-3.0-or-later
                                      
# Takes 2 arguments and both are mandatory.
# Relative path to directory where to place header file should be first argument.
# Name of class to be used should be second argument.
# First argument should always be at least `include` and if path contains subdirectories then the additional directory 
# hierarchy should already have been added to both the `include` and `src` directories before calling this script.

# IOW `./createclass include Player` will create `player.h` in `include` directory and `player.cpp` in `src` directory.
# But if you want to for example add a Vertex class to a `Shaders` sub-directory of your `include` then a subdirectory 
# with the name `Shaders` should already exist in both `include` and `src` before you call this script and the call
# for that would be `./createclass include/shaders Vertex`

if [ ! $# -eq 2 ]; then
    echo "Error: Command takes 2 arguments, $# provided."
    exit 1
fi

# prefer lower case for file names and project name in CMakeLists.txt
upperedSecondArgument=$(echo "$2" | tr [:lower:] [:upper:])
loweredSecondArgument=$(echo "$2" | tr [:upper:] [:lower:])

foundFile=$( find include -name "$loweredSecondArgument.h")
if [ ${#foundFile} -gt 0 ]; then
    echo "$foundFile already exists! Choose a different class name."
    exit 1
fi

#from https://github.com/dylanaraps/pure-sh-bible
lstrip() {
    # Usage: lstrip "string" "pattern"
    printf '%s\n' "${1##$2}"
}

CPPFILE=""
INCPATH="$1"
INCLUDELENGTH=${#INCPATH}
SIMPLE="include"

if [ "$INCPATH" = "$SIMPLE" ]; then
    INCPATH="$loweredSecondArgument.h"
    CPPFILE="src/$loweredSecondArgument.cpp"
else
    subpath=$(lstrip "$1" 'include/')

    if [ ${#subpath} = $INCLUDELENGTH ]; then
        echo 'Error: first argument is an invalid include path'
        exit 1
    fi
    if [ ! -d "$1" ] || [ ! -d src/"$subpath" ]; then
        echo "Error: Sub-directories with name $subpath/ must exist in both include/ and src/ 
       in order to run command '$0 $1 $2'"  
        exit 1
    fi

    CPPFILE="src/$subpath/$loweredSecondArgument.cpp"
    INCPATH="$subpath/$loweredSecondArgument.h"  # for appending later to ${CPPFILE}.cpp 
fi

classTemplate=/home/$USER/createProject/templates/class.template

sed "s:includename:$upperedSecondArgument:g" "$classTemplate" > "$1/$loweredSecondArgument.h"
printf "%s" "$(sed "s:className:$2:g" "$1/$loweredSecondArgument.h")" > "$1/$loweredSecondArgument.h"

printf "%s" "$(sed "s:src/main.cpp:$CPPFILE\nsrc/main.cpp:g" CMakeLists.txt)" > CMakeLists.txt

touch "$CPPFILE"

printf "#include \"$INCPATH\"" > "$CPPFILE"
printf "\n\n\n\n$2::$2(){}\n\n\n$2::~$2(){}" >> "$CPPFILE"

